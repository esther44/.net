//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.Articles {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Article", Namespace="http://schemas.datacontract.org/2004/07/Articles")]
    [System.SerializableAttribute()]
    public partial class Article : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarqueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Marque {
            get {
                return this.MarqueField;
            }
            set {
                if ((object.ReferenceEquals(this.MarqueField, value) != true)) {
                    this.MarqueField = value;
                    this.RaisePropertyChanged("Marque");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Articles.IServiceArticle")]
    public interface IServiceArticle {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArticle/Insert", ReplyAction="http://tempuri.org/IServiceArticle/InsertResponse")]
        void Insert(Client.Articles.Article article);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArticle/Insert", ReplyAction="http://tempuri.org/IServiceArticle/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(Client.Articles.Article article);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArticle/SelectAll", ReplyAction="http://tempuri.org/IServiceArticle/SelectAllResponse")]
        System.Collections.Generic.List<Client.Articles.Article> SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArticle/SelectAll", ReplyAction="http://tempuri.org/IServiceArticle/SelectAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Client.Articles.Article>> SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArticle/SelectByRef", ReplyAction="http://tempuri.org/IServiceArticle/SelectByRefResponse")]
        Client.Articles.Article SelectByRef(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceArticle/SelectByRef", ReplyAction="http://tempuri.org/IServiceArticle/SelectByRefResponse")]
        System.Threading.Tasks.Task<Client.Articles.Article> SelectByRefAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceArticleChannel : Client.Articles.IServiceArticle, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceArticleClient : System.ServiceModel.ClientBase<Client.Articles.IServiceArticle>, Client.Articles.IServiceArticle {
        
        public ServiceArticleClient() {
        }
        
        public ServiceArticleClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceArticleClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceArticleClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceArticleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Insert(Client.Articles.Article article) {
            base.Channel.Insert(article);
        }
        
        public System.Threading.Tasks.Task InsertAsync(Client.Articles.Article article) {
            return base.Channel.InsertAsync(article);
        }
        
        public System.Collections.Generic.List<Client.Articles.Article> SelectAll() {
            return base.Channel.SelectAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Client.Articles.Article>> SelectAllAsync() {
            return base.Channel.SelectAllAsync();
        }
        
        public Client.Articles.Article SelectByRef(int id) {
            return base.Channel.SelectByRef(id);
        }
        
        public System.Threading.Tasks.Task<Client.Articles.Article> SelectByRefAsync(int id) {
            return base.Channel.SelectByRefAsync(id);
        }
    }
}
